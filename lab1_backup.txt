
---------------------- Debouncer -----------------------------
--library ieee;
--use ieee.std_logic_1164.all;
--use ieee.std_logic_unsigned.all;
--
--entity debouncer is
--	port(
--	clk : IN std_logic;
--	KEY : IN std_logic_vector(3 downto 0);
--	KEY_OUT : OUT std_logic_vector(3 downto 0)
--	);
--
--end entity;
--
--architecture debouncing of debouncer is
--
--	signal s0, s1, s2 : std_logic_vector(3 downto 0);
--
--begin
--
--	process(clk)
--	begin
--			
--		if (rising_edge(clk)) then
--		
--			s0 <= KEY;
--			s1 <= s0;
--			s2 <= s1;
--			
--		end if;
--		
--	
--	
--	end process;
--	
--	KEY_OUT <= s0 and s1 and s2;
--
--end architecture;

------------------------ Displayer -----------------------------
library ieee;
use ieee.std_logic_1164.all;
use ieee.std_logic_unsigned.all;

entity NameDisplay is

	port(
	
		KEY : IN std_logic_vector(3 downto 0);
		SW : IN std_logic_vector(17 downto 0);
		CLOCK_50 : IN std_logic;
		
		LEDG : OUT std_logic_vector(4 downto 0);
		LCD_EN, LCD_RS, LCD_RW, LCD_ON, LCD_BLON : OUT std_logic;
		LCD_DATA : OUT std_logic_vector(7 downto 0)
		
		);

end entity;


architecture statemachine of NameDisplay is
	
	signal d0 : std_logic_vector(3 downto 0);
	
	type state_type is (reset, s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10);
	signal state : state_type := reset;

begin

LCD_BLON <= '1'; -- backlight is always on
LCD_ON <= '1'; -- LCD is always on
--LCD_EN <= KEY(0); -- connect the clock to the lcd_en input
LCD_RW <= '0'; -- always writing to the LCD
--LCD_RS <= SW(8); -- connect to slider switch 8
--LCD_DATA <= SW(7 downto 0); -- connect to slider switches 7-0
LEDG(0) <= KEY(0); -- send the clock to a green light


--	LCD_BLON <= '1'; -- backlight is always on
--	LCD_ON <= '1'; -- LCD is always on
--	LCD_RW <= '0'; -- always writing to the LCD
	LCD_EN <= CLOCK_50;
--	LEDG(0) <= KEY(0);

--	
--	
	process(KEY, CLOCK_50)
	
--	VARIABLE tmp_out_0: std_logic := '0';
	variable clk_counter : integer:=0;

	
	begin
	
	
--	if (tmp_out_0 = '0') then
--	
--		state <= reset;
--		tmp_out_0 := '1';
--	end if;
--	
		if(KEY(2) = '0') then --AND KEY(0) = '0'
		
			state <= reset;
			LEDG(4) <= '1';
	
--		end if;
		
--		end process;
		
--		
		elsif (rising_edge(CLOCK_50)) then
			clk_counter:=clk_counter+1;
		
			if clk_counter = 25000000 then
				clk_counter := 0;
		
			case state is
			
				when reset =>
					LCD_RS <= '0';
					LCD_DATA <= "00111000";
					state <= s0;
				
				when s0 =>
--					LCD_RS <= '0';
					LCD_DATA <= "00111000";
					state <= s1;
					
				when s1 =>
--					LCD_RS <= '0';
					LCD_DATA <= "00001100";
					state <= s2;
					
				when s2 =>
--					LCD_RS <= '0';
					LCD_DATA <= "00000001";
					state <= s3;
					
				when s3 =>
--					LCD_RS <= '0';
					LCD_DATA <= "00000110";
					state <= s4;
					
				when s4 =>
--					LCD_RS <= '0';
					LCD_DATA <= "10000000";
					state <= s5;
					
				when s5 =>
					LCD_RS <= '1';
					LCD_DATA <= "01000001";
					state <= s6;
					
				when s6 =>
--					LCD_RS <= '1';
					LCD_DATA <= "01001101";
					state <= s7;
			
				when s7 =>
--					LCD_RS <= '1';
					LCD_DATA <= "01001001";
					state <= s8;
			
				when s8 =>
--					LCD_RS <= '1';
					LCD_DATA <= "01010010";
					state <= s9;
					
				when s9 =>
--					LCD_RS <= '1';
					LCD_DATA <= "01000001";
					state <= s10;
					
				when s10 =>
--					LCD_RS <= '1';
					LCD_DATA <= "01001100";
					state <= s5;
		
				when others =>
					LEDG(4) <= '1';
					
				
			end case;
		
			end if;

--		else
--		elsif (rising_edge(CLOCK_50)) then
--			LEDG(4) <= '0';
----			
		end if;
--	
--	
	end process;


	
end architecture;
